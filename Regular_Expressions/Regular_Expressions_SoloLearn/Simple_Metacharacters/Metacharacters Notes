Metacharacters:


Metacharacters are what make regular expressions more powerful than normal string methods.
They allow you to create regular expressions to represent concepts like "one or more repetitions of a vowel".

The existence of metacharacters poses a problem if you want to create a regular expression (or regex)
that matches a literal metacharacter, such as "$".
You can do this by escaping the metacharacters by putting a backslash in front of them.

However, this can cause problems, since backslashes also have an escaping function in normal Python strings.
This can mean putting three or four backslashes in a row to do all the escaping.

!!!!
To avoid this, you can use a raw string, which is a normal string with an "r" in front of it.
We saw usage of raw strings in the previous lesson.
!!!!


***************************************************************************************************

The first metacharacter we will look at is . (dot).
This matches any character, other than a new line.

***************************************************************************************************

The next two metacharacters are ^ and $.
These match the start and end of a string, respectively.

***************************************************************************************************

Some more metacharacters are * + ? { and }.
These specify numbers of repetitions.
The metacharacter * means "zero or more repetitions of the previous thing".
It tries to match as many repetitions as possible.
The "previous thing" can be a single character, a class, or a group of characters in parentheses.

***************************************************************************************************

The metacharacter + is very similar to *, except it means "one or more repetitions",
as opposed to "zero or more repetitions".

***************************************************************************************************

The metacharacter ? means "zero or one repetitions".

***************************************************************************************************
Curly Braces:

Curly braces can be used to represent the number of repetitions between two numbers.
The regex {x,y} means "between x and y repetitions of something".
Hence {0,1} is the same thing as ?.
If the first number is missing, it is taken to be zero. If the second number is missing, it is taken to be infinity.

***************************************************************************************************